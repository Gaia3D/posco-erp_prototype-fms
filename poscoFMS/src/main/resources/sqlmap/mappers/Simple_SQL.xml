<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.posco.erp.poscofms.main.dao.PoscoFmsDao">

    <select id="selectTotalMeasurementDates" resultType="String">
    	select
    		to_char(survey_dt, 'YYYY-MM-DD')
    	from
    		survey_info
    	order by survey_dt desc
    </select>
    
    <select id="selectAllGirderErrorStatus" parameterType="String" resultType="GirderErrorStatus">
		with a as(
		select foo.girder_id, count(*)
		from (
		select list.girder_id
		  from check_list list
			,(    select girder_id, max(change_date) as change_date
			       from girder_his 
			      group by girder_id
			) his
		 where list.check_date >= his.change_date
		   and list.girder_id = his.girder_id
		) as foo
		group by foo.girder_id
		),
		b as (
		select girder_id
			, case when (comp0 - @ref0 >= 0) and (comp1 - @ref1 >= 0) and (comp2 - @ref2 >= 0) then 't' else 'f' end result
		from (
		select girder_id, dis0, dis1, dis2, val0, val1, val2
			, dis1*1000/500 comp0
			, dis2*1000/500 comp1
			, (dis2 + dis1)*1000/500 comp2
			, val1-val0 ref0
			, val2-val1 ref1
			, val0-val2 ref2
		  from (
		  select * from (
		  select distinct girder_id
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 0) val0
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 1) val1
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 2) val2
				,(select dis from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 0) dis0
				,(select dis from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 1) dis1
				,(select dis from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 2) dis2
			  from girder_straight girder
			 where girder.survey_dt = to_date(#{date},'YYYY-MM-DD')
			) str
		    ) as tmp_2
			 where tmp_2.val2 is not NULL
			 and tmp_2.val1 is not NULL
			 and tmp_2.val0 is not NULL
		) comp
		 order by 1,2
		 ),
		c as (
		select girder_id
			, case when (@(val0 + valb0) >= 21.7) and (@(val1 + valb1) >= 21.7) and (@(val2 + valb2) >= 21.7) then 't' else 'f' end result
		 from 
		(
		select * from (
			select distinct girder_id
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 0 ) val0
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 1) val1
				,(select val from girder_straight
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 2) val2
				,(select val from girder_straight
				   where girder_id <![CDATA[ <> ]]> girder.girder_id and survey_dt = girder.survey_dt and pos = 0 
				   and girder_order = girder.girder_order and rail = girder.rail) valb0
				,(select val from girder_straight
				   where girder_id <![CDATA[ <> ]]> girder.girder_id and survey_dt = girder.survey_dt and pos = 1 
				   and girder_order = girder.girder_order and rail = girder.rail) valb1
				,(select val from girder_straight
				   where girder_id <![CDATA[ <> ]]> girder.girder_id and survey_dt = girder.survey_dt and pos = 2 
				   and girder_order = girder.girder_order and rail = girder.rail) valb2
			  from girder_straight girder
			 where girder.survey_dt = to_date(#{date},'YYYY-MM-DD')
			 ) as tmp_2
			 where tmp_2.val2 is not NULL
			 and tmp_2.val1 is not NULL
			 and tmp_2.val0 is not NULL
			 and tmp_2.valb2 is not NULL
			 and tmp_2.valb1 is not NULL
			 and tmp_2.valb0 is not NULL
		) 
		tmp
		),
		d as (
		select girder_id
		, case when ((val2 + val0)/2 <![CDATA[ <= ]]> val1) then 't' else 'f' end result
		 from 
		(
		select * from (
			select distinct girder_id
				,(select val from girder_bend
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 0 ) val0
				,(select val from girder_bend
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 1) val1
				,(select val from girder_bend
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 2) val2
			  from girder_bend girder
			 where girder.survey_dt = to_date(#{date},'YYYY-MM-DD')
			) as tmp_2
			 where tmp_2.val2 is not NULL
			 and tmp_2.val1 is not NULL
			 and tmp_2.val0 is not NULL
		) 
		tmp
		),
		e as (
		select girder_id
		, case when ((val0 + val2) <![CDATA[ <= ]]> 5) then 't' else 'f' end result
		 from 
		(
		select * from (
			select distinct girder_id
				,(select val from girder_bend
				   where girder_id = girder.girder_id and survey_dt = girder.survey_dt and pos = 0 ) val0
				,(select val from girder_bend 
				   where rail = girder.rail and line = girder.line and girder_order = girder.girder_order-1 
				   and pos = 2 and survey_dt = girder.survey_dt) val2
			  from girder_bend girder
			 where girder.survey_dt = to_date(#{date},'YYYY-MM-DD')
			 and girder.girder_order <![CDATA[ <> ]]> 1
			 ) as tmp_2
			 where tmp_2.val2 is not NULL
			 and tmp_2.val0 is not NULL
		) 
		tmp
		)
		select base.girder_id as "girderId", girder_top as "positionY", girder_left as "positionX"
			,case when ((b.result = 't') or (b.result is null))
			and ((c.result = 't') or (c.result is null))
			and ((d.result = 't') or (d.result is null)) 
			and ((e.result = 't') or (e.result is null))
			then True else False end as "measurementPass"
			, case when (a.count > 0) then True else False end  as "inspectionPass"
		from (select girder_id, girder_top, girder_left from girder_info) as base
		left join b on base.girder_id = b.girder_id
		left join c on base.girder_id = c.girder_id
		left join d on base.girder_id = d.girder_id
		left join e on base.girder_id = e.girder_id
		left join a on base.girder_id = a.girder_id 
    </select>
    
    <select id="selectGirderMeasurement" resultType="GirderMeasurement">
	
	with baseData as (
	select distinct girder_id
		,(select val from girder_straight where girder_id = info.girder_id and pos=0 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorFirstVal
		,(select val from girder_straight where girder_id = info.girder_id and pos=1 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorMidVal
		,(select val from girder_straight where girder_id = info.girder_id and pos=2 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorLastVal
		,(select dis from girder_straight where girder_id = info.girder_id and pos=0 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorFirstDis
		,(select dis from girder_straight where girder_id = info.girder_id and pos=1 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorMidDis
		,(select dis from girder_straight where girder_id = info.girder_id and pos=2 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) HorLastDis
		,(select val from girder_bend where girder_id = info.girder_id and pos=0 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) VerFirstval
		,(select val from girder_bend where girder_id = info.girder_id and pos=1 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) VerMidval
		,(select val from girder_bend where girder_id = info.girder_id and pos=2 and survey_dt = to_timestamp(#{date}, 'YYYY-MM-DD')) VerLastval
		,(select girder_id from girder_info where rail = info.rail and girder_id = info.line||info.girder_order-1 ) prev_girder
		,(select girder_id from girder_info where rail = info.rail and girder_order = info.girder_order and line != info.line) count_girder
	 from girder_info info
	 where true
	 )
	 select info.girder_id
		,coalesce(info.HorFirstval, 9999) as horizontalDeformationAtStart
		,coalesce(info.HorMidval, 9999) as horizontalDeformationAtMid
		,coalesce(info.HorLastval, 9999) as horizontalDeformationAtLast
		,coalesce(info.HorFirstdis, 9999) as gapLengthAtStart
		,coalesce(info.HorMiddis, 9999) as gapLengthAtMid
		,coalesce(info.HorLastdis, 9999) as gapLengthAtLast
		,coalesce(counter.HorFirstval, 9999) as horizontalDeformationAtCounterGirderStart
		,coalesce(counter.HorMidval, 9999) as horizontalDeformationAtCounterGirderMid
		,coalesce(counter.HorLastval, 9999) as horizontalDeformationAtCounterGirderLast
		,coalesce(info.VerFirstval, 9999) as verticalDeformationAtStart
		,coalesce(info.VerMidval, 9999) as verticalDeformationAtMid
		,coalesce(info.VerLastval, 9999) as verticalDeformationAtLast
		,coalesce(prev.VerLastval, 9999) as verticalDeformationAtPreviousGirderLast
	   from baseData counter, baseData info
		left outer join baseData prev on prev.girder_id = info.prev_girder
	  where true
	    and info.count_girder = counter.girder_id
	   and info.girder_id = #{id}
    </select>
    
    <select id="selectGirderReplacement" resultType="GirderInspection">
    	select
			#{id} as girderId,
			to_char(change_date, 'YYYY-MM-DD') as girderReplacementDate,
			coalesce(manager, 'NO NAME') as personInCharge,
			coalesce(change_reason, 'NO REASON') as replacementReason
		from
			girder_his
		where
			girder_id = #{id}
		order by change_date desc
		limit 1
    </select>
    
    <select id="selectGirderInspectionRecords" resultType="GirderInspectionItem">
    	select
			code as inspectionType,
			coalesce(org, 0.0) as crackCrg,
			coalesce(bg, 0.0) as crackBg,
			coalesce(col, 0.0) as crackColumn,
			coalesce(loose, 0) as boltFractures,
			coalesce(crack, 0) as boltsLoosen,
			coalesce(disable_crack, 0) as unrecoverableBoltFractures,
			coalesce(disable_loose, 0) as unrecoverableBoltsLoosen
		from
			check_list
		where
			girder_id = #{id}
			and check_date >= to_timestamp(#{date}, 'YYYY-MM-DD')
    </select>
    
    <select id="selectGirderHorizontalDeformationHistory" resultType="Integer">
    	select
			val
		from
			girder_straight
		where
			girder_id = #{id}
			and pos = #{positionType}
		order by survey_dt
    </select>
    
    <select id="selectGirderVerticalDeformationHistory" resultType="Integer">
    	select
			val
		from
			girder_bend
		where
			girder_id = #{id}
			and pos = #{positionType}
		order by survey_dt
    </select>
	
	<select id="selectGirderInfo" resultType="GirderErrorStatus">
		select 
			girder_id as "girderId", 
			girder_top as "positionY", 
			girder_left as "positionX"
		from girder_info
	</select>

</mapper>